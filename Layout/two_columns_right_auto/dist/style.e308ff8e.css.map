{"version":3,"sources":["style.css"],"names":[],"mappingsfile":"style.e308ff8e.css","sourceRoot":"..","sourcesContent":[".wrapper {\r\n    padding: 15px 20px;\r\n    border: 1px dashed #ff6c60;\r\n}\r\n.left {\r\n    width: 120px;/* 已经固定好宽度*/\r\n    border: 5px solid #ddd;\r\n}\r\n.right {\r\n    margin-left: 20px;\r\n    border: 5px solid #ddd;\r\n}\r\n\r\n\r\n\r\n/* 双inline-box  calc*/\r\n.wrapper-inline-block {\r\n    /* box-sizing: content-box; */\r\n    font-size: 0; /*父容器字体大小设0，消除div之间的空格，宽度才精确*/  \r\n}\r\n\r\n.wrapper-inline-block .left,\r\n.wrapper-inline-block .right {\r\n    display: inline-block;/*注意这个是加在想让他们共一行的元素里面*/\r\n    vertical-align: top; /*vertical-align是行内元素用来指定自己的对齐方式，故要在子元素这里设置，不同行内元素对齐方式可以不同*/\r\n    font-size: 14px;\r\n    box-sizing: border-box;/*这样才能精确calc宽度，甚至包含了border*/\r\n}\r\n\r\n.wrapper-inline-block .right {\r\n    width: calc(100% - 140px);/* 写成100%-140px就会失效 */\r\n}\r\n\r\n\r\n/* 双float calc */\r\n\r\n.wrapper-double-float {\r\n    overflow: auto;        /*父元素里面用overflow清除浮动*/\r\n    /* box-sizing: content-box; */\r\n}\r\n\r\n.wrapper-double-float .left,\r\n.wrapper-double-float .right {\r\n    float: left;/* float本来就是紧贴的，在同一行，所以无需inline-block;，自然也就少了顶端对齐，空格字符占空间等问题。*/\r\n    box-sizing: border-box;    /*前面设置的margin-left还是生效的*/\r\n}\r\n\r\n.wrapper-double-float .right {\r\n    width: calc(100% - 140px);\r\n}\r\n\r\n\r\n\r\n/* float+margin-left */\r\n/* block级别的元素盒子的宽度具有填满父容器，并随着父容器的宽度自适应的流动特性。 */\r\n.wrapper-float {\r\n    overflow: hidden;       \r\n}\r\n\r\n.wrapper-float .left {\r\n    float: left;\r\n}\r\n\r\n.wrapper-float .right {\r\n    margin-left: 150px;\r\n    /* 利用了块级元素会自动填充父元素 */\r\n    /* 是会占满父元素的，除非显式规定了宽高 */\r\n}\r\n\r\n\r\n\r\n/* 使用absolute+margin-left方法 */\r\n/* 好像没有清除浮动的方法 */\r\n/*左比右高 出现坍陷*/\r\n/*不够优雅*/\r\n\r\n.wrapper-absolute{\r\n    /* overflow: hidden; */\r\n    /* overflow: hidden不起作用，能不能从BFC去解释 */\r\n    /* min-height: 200px;  */ \r\n    /* 索性给父元素规定一个最小高度，防止左比右高坍陷 */\r\n}\r\n\r\n.wrapper-absolute .left {\r\n    position: absolute;\r\n}\r\n\r\n.wrapper-absolute .right {\r\n    margin-left: 150px;\r\n}\r\n\r\n\r\n/* float+overflow BFC */\r\n/* 此处要形成大块罩小块，因为形成了大块了，是对外面没影响了\r\n但是里面还是乱的，所以里面要形成小块才能家里和谐 */\r\n.wrapper-float-bfc {\r\n    overflow: auto;\r\n}\r\n\r\n.wrapper-float-bfc .left {\r\n    float: left;/* 用float其实是使其固定在左边 */\r\n    margin-right: 20px;/*给float元素加margin是最简单的，若给right加需要很大的数值：即要150px*/\r\n}\r\n\r\n.wrapper-float-bfc .right {\r\n    margin-left: 0;/* margin右边来设不起作用？*/\r\n    overflow: auto;/*右边是一个独立的BFC,就不会受浮动影响了*/\r\n    /* margin-left: 150px; */\r\n    /*flow-root?*/\r\n}\r\n\r\n\r\n\r\n/* float+display:flow-root BFC 无副作用 但是好像有坑*/\r\n/* flow-root可理解为作用和overflow一样都是用来生成BFC的\r\n只不过不会产生像滚动条这样的副作用 */\r\n.wrapper-flowroot-bfc{\r\n    display: flow-root;\r\n}\r\n\r\n.wrapper-flowroot-bfc .left{\r\n    float: left;\r\n}\r\n\r\n.wrapper-flowroot-bfc .right{\r\n    /* display: flow-root; */\r\n    /* 为什么这里可加可不加 但是下面的.side却不加不行？ */\r\n}\r\n\r\n.box{\r\n    background-color: rgb(224, 206, 247);\r\n    border: 5px solid rebeccapurple;\r\n    display: flow-root;\r\n}\r\n\r\n.float{\r\n    float: left;\r\n    width: 200px;\r\n    height: 150px;\r\n    background-color: white;\r\n    border:1px solid black;\r\n    padding: 10px;\r\n}    \r\n\r\n.side{\r\n    border: 5px red solid;\r\n    display: flow-root;\r\n    /* vertical-align: bottom;因为不是行内元素 所以此处设置不起作用 */\r\n}\r\n\r\n\r\n\r\n\r\n/*flex 最好的方案*/\r\n.wrapper-flex{\r\n    display:flex;\r\n    align-items: flex-start;\r\n}\r\n\r\n.wrapper-flex .left{\r\n    flex:0 0 auto;\r\n}\r\n\r\n.wrapper-flex .right{\r\n    flex:1 1 auto;\r\n}\r\n\r\n\r\n\r\n\r\n/* 新型的布局方式,可以满足需求，但这并不是它发挥用处的真正地方 */\r\n.wrapper-grid {\r\n    display: grid;\r\n    grid-template-columns: 120px 1fr;\r\n    align-items: start;\r\n}\r\n\r\n.wrapper-grid .left,\r\n.wrapper-grid .right {\r\n    box-sizing: border-box;\r\n}\r\n\r\n.wrapper-grid .left {\r\n    grid-column: 1;\r\n}\r\n\r\n.wrapper-grid .right {\r\n    grid-column: 2;\r\n}\r\n\r\n"]}